// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAccountAPI_UserSignup_FullMethodName         = "/api.user.v1.UserAccountAPI/UserSignup"
	UserAccountAPI_UserResendSignup_FullMethodName   = "/api.user.v1.UserAccountAPI/UserResendSignup"
	UserAccountAPI_UserCompleteSignup_FullMethodName = "/api.user.v1.UserAccountAPI/UserCompleteSignup"
	UserAccountAPI_UserLogin_FullMethodName          = "/api.user.v1.UserAccountAPI/UserLogin"
	UserAccountAPI_UserRefreshToken_FullMethodName   = "/api.user.v1.UserAccountAPI/UserRefreshToken"
)

// UserAccountAPIClient is the client API for UserAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountAPIClient interface {
	UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	UserResendSignup(ctx context.Context, in *UserResendSignupRequest, opts ...grpc.CallOption) (*UserResendSignupResponse, error)
	UserCompleteSignup(ctx context.Context, in *UserCompleteSignupRequest, opts ...grpc.CallOption) (*UserCompleteSignupResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error)
}

type userAccountAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountAPIClient(cc grpc.ClientConnInterface) UserAccountAPIClient {
	return &userAccountAPIClient{cc}
}

func (c *userAccountAPIClient) UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, UserAccountAPI_UserSignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountAPIClient) UserResendSignup(ctx context.Context, in *UserResendSignupRequest, opts ...grpc.CallOption) (*UserResendSignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResendSignupResponse)
	err := c.cc.Invoke(ctx, UserAccountAPI_UserResendSignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountAPIClient) UserCompleteSignup(ctx context.Context, in *UserCompleteSignupRequest, opts ...grpc.CallOption) (*UserCompleteSignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCompleteSignupResponse)
	err := c.cc.Invoke(ctx, UserAccountAPI_UserCompleteSignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountAPIClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserAccountAPI_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountAPIClient) UserRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserAccountAPI_UserRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountAPIServer is the server API for UserAccountAPI service.
// All implementations must embed UnimplementedUserAccountAPIServer
// for forward compatibility.
type UserAccountAPIServer interface {
	UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error)
	UserResendSignup(context.Context, *UserResendSignupRequest) (*UserResendSignupResponse, error)
	UserCompleteSignup(context.Context, *UserCompleteSignupRequest) (*UserCompleteSignupResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error)
	mustEmbedUnimplementedUserAccountAPIServer()
}

// UnimplementedUserAccountAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAccountAPIServer struct{}

func (UnimplementedUserAccountAPIServer) UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedUserAccountAPIServer) UserResendSignup(context.Context, *UserResendSignupRequest) (*UserResendSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResendSignup not implemented")
}
func (UnimplementedUserAccountAPIServer) UserCompleteSignup(context.Context, *UserCompleteSignupRequest) (*UserCompleteSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCompleteSignup not implemented")
}
func (UnimplementedUserAccountAPIServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserAccountAPIServer) UserRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRefreshToken not implemented")
}
func (UnimplementedUserAccountAPIServer) mustEmbedUnimplementedUserAccountAPIServer() {}
func (UnimplementedUserAccountAPIServer) testEmbeddedByValue()                        {}

// UnsafeUserAccountAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountAPIServer will
// result in compilation errors.
type UnsafeUserAccountAPIServer interface {
	mustEmbedUnimplementedUserAccountAPIServer()
}

func RegisterUserAccountAPIServer(s grpc.ServiceRegistrar, srv UserAccountAPIServer) {
	// If the following call pancis, it indicates UnimplementedUserAccountAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAccountAPI_ServiceDesc, srv)
}

func _UserAccountAPI_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountAPIServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountAPI_UserSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountAPIServer).UserSignup(ctx, req.(*UserSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountAPI_UserResendSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResendSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountAPIServer).UserResendSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountAPI_UserResendSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountAPIServer).UserResendSignup(ctx, req.(*UserResendSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountAPI_UserCompleteSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCompleteSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountAPIServer).UserCompleteSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountAPI_UserCompleteSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountAPIServer).UserCompleteSignup(ctx, req.(*UserCompleteSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountAPI_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountAPIServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountAPI_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountAPIServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountAPI_UserRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountAPIServer).UserRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountAPI_UserRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountAPIServer).UserRefreshToken(ctx, req.(*UserRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountAPI_ServiceDesc is the grpc.ServiceDesc for UserAccountAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.UserAccountAPI",
	HandlerType: (*UserAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _UserAccountAPI_UserSignup_Handler,
		},
		{
			MethodName: "UserResendSignup",
			Handler:    _UserAccountAPI_UserResendSignup_Handler,
		},
		{
			MethodName: "UserCompleteSignup",
			Handler:    _UserAccountAPI_UserCompleteSignup_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserAccountAPI_UserLogin_Handler,
		},
		{
			MethodName: "UserRefreshToken",
			Handler:    _UserAccountAPI_UserRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/user.proto",
}
