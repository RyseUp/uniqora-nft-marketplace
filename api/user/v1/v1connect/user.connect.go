// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/user/v1/user.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/RyseUp/uniqora-nft-marketplace/api/user/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// UserAccountAPIName is the fully-qualified name of the UserAccountAPI service.
	UserAccountAPIName = "api.user.v1.UserAccountAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAccountAPIUserSignupProcedure is the fully-qualified name of the UserAccountAPI's UserSignup
	// RPC.
	UserAccountAPIUserSignupProcedure = "/api.user.v1.UserAccountAPI/UserSignup"
	// UserAccountAPIUserResendSignupProcedure is the fully-qualified name of the UserAccountAPI's
	// UserResendSignup RPC.
	UserAccountAPIUserResendSignupProcedure = "/api.user.v1.UserAccountAPI/UserResendSignup"
	// UserAccountAPIUserCompleteSignupProcedure is the fully-qualified name of the UserAccountAPI's
	// UserCompleteSignup RPC.
	UserAccountAPIUserCompleteSignupProcedure = "/api.user.v1.UserAccountAPI/UserCompleteSignup"
	// UserAccountAPIUserLoginProcedure is the fully-qualified name of the UserAccountAPI's UserLogin
	// RPC.
	UserAccountAPIUserLoginProcedure = "/api.user.v1.UserAccountAPI/UserLogin"
	// UserAccountAPIUserRefreshTokenProcedure is the fully-qualified name of the UserAccountAPI's
	// UserRefreshToken RPC.
	UserAccountAPIUserRefreshTokenProcedure = "/api.user.v1.UserAccountAPI/UserRefreshToken"
	// UserAccountAPIUserLogoutProcedure is the fully-qualified name of the UserAccountAPI's UserLogout
	// RPC.
	UserAccountAPIUserLogoutProcedure = "/api.user.v1.UserAccountAPI/UserLogout"
	// UserAccountAPIUserUpdateProfileProcedure is the fully-qualified name of the UserAccountAPI's
	// UserUpdateProfile RPC.
	UserAccountAPIUserUpdateProfileProcedure = "/api.user.v1.UserAccountAPI/UserUpdateProfile"
	// UserAccountAPIUserGetSelfProfileProcedure is the fully-qualified name of the UserAccountAPI's
	// UserGetSelfProfile RPC.
	UserAccountAPIUserGetSelfProfileProcedure = "/api.user.v1.UserAccountAPI/UserGetSelfProfile"
	// UserAccountAPIUserChangePasswordProcedure is the fully-qualified name of the UserAccountAPI's
	// UserChangePassword RPC.
	UserAccountAPIUserChangePasswordProcedure = "/api.user.v1.UserAccountAPI/UserChangePassword"
	// UserAccountAPIUserGoogleAuthProcedure is the fully-qualified name of the UserAccountAPI's
	// UserGoogleAuth RPC.
	UserAccountAPIUserGoogleAuthProcedure = "/api.user.v1.UserAccountAPI/UserGoogleAuth"
	// UserAccountAPIExchangeGoogleCodeProcedure is the fully-qualified name of the UserAccountAPI's
	// ExchangeGoogleCode RPC.
	UserAccountAPIExchangeGoogleCodeProcedure = "/api.user.v1.UserAccountAPI/ExchangeGoogleCode"
	// UserAccountAPIUserMetaMaskAuthProcedure is the fully-qualified name of the UserAccountAPI's
	// UserMetaMaskAuth RPC.
	UserAccountAPIUserMetaMaskAuthProcedure = "/api.user.v1.UserAccountAPI/UserMetaMaskAuth"
	// UserAccountAPIUserGetMetaMaskNonceProcedure is the fully-qualified name of the UserAccountAPI's
	// UserGetMetaMaskNonce RPC.
	UserAccountAPIUserGetMetaMaskNonceProcedure = "/api.user.v1.UserAccountAPI/UserGetMetaMaskNonce"
)

// UserAccountAPIClient is a client for the api.user.v1.UserAccountAPI service.
type UserAccountAPIClient interface {
	UserSignup(context.Context, *connect_go.Request[v1.UserSignupRequest]) (*connect_go.Response[v1.UserSignupResponse], error)
	UserResendSignup(context.Context, *connect_go.Request[v1.UserResendSignupRequest]) (*connect_go.Response[v1.UserResendSignupResponse], error)
	UserCompleteSignup(context.Context, *connect_go.Request[v1.UserCompleteSignupRequest]) (*connect_go.Response[v1.UserCompleteSignupResponse], error)
	UserLogin(context.Context, *connect_go.Request[v1.UserLoginRequest]) (*connect_go.Response[v1.UserLoginResponse], error)
	UserRefreshToken(context.Context, *connect_go.Request[v1.UserRefreshTokenRequest]) (*connect_go.Response[v1.UserRefreshTokenResponse], error)
	UserLogout(context.Context, *connect_go.Request[v1.UserLogoutRequest]) (*connect_go.Response[v1.UserLogoutResponse], error)
	UserUpdateProfile(context.Context, *connect_go.Request[v1.UserUpdateProfileRequest]) (*connect_go.Response[v1.UserUpdateProfileResponse], error)
	UserGetSelfProfile(context.Context, *connect_go.Request[v1.UserGetSelfProfileRequest]) (*connect_go.Response[v1.UserGetSelfProfileResponse], error)
	UserChangePassword(context.Context, *connect_go.Request[v1.UserChangePasswordRequest]) (*connect_go.Response[v1.UserChangePasswordResponse], error)
	// login-via-google
	UserGoogleAuth(context.Context, *connect_go.Request[v1.UserGoogleAuthRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error)
	ExchangeGoogleCode(context.Context, *connect_go.Request[v1.ExchangeGoogleCodeRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error)
	// login-via-metamask
	UserMetaMaskAuth(context.Context, *connect_go.Request[v1.UserMetaMaskAuthRequest]) (*connect_go.Response[v1.UserMetaMaskAuthResponse], error)
	UserGetMetaMaskNonce(context.Context, *connect_go.Request[v1.UserGetMetaMaskNonceRequest]) (*connect_go.Response[v1.UserGetMetaMaskNonceResponse], error)
}

// NewUserAccountAPIClient constructs a client for the api.user.v1.UserAccountAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserAccountAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserAccountAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userAccountAPIClient{
		userSignup: connect_go.NewClient[v1.UserSignupRequest, v1.UserSignupResponse](
			httpClient,
			baseURL+UserAccountAPIUserSignupProcedure,
			opts...,
		),
		userResendSignup: connect_go.NewClient[v1.UserResendSignupRequest, v1.UserResendSignupResponse](
			httpClient,
			baseURL+UserAccountAPIUserResendSignupProcedure,
			opts...,
		),
		userCompleteSignup: connect_go.NewClient[v1.UserCompleteSignupRequest, v1.UserCompleteSignupResponse](
			httpClient,
			baseURL+UserAccountAPIUserCompleteSignupProcedure,
			opts...,
		),
		userLogin: connect_go.NewClient[v1.UserLoginRequest, v1.UserLoginResponse](
			httpClient,
			baseURL+UserAccountAPIUserLoginProcedure,
			opts...,
		),
		userRefreshToken: connect_go.NewClient[v1.UserRefreshTokenRequest, v1.UserRefreshTokenResponse](
			httpClient,
			baseURL+UserAccountAPIUserRefreshTokenProcedure,
			opts...,
		),
		userLogout: connect_go.NewClient[v1.UserLogoutRequest, v1.UserLogoutResponse](
			httpClient,
			baseURL+UserAccountAPIUserLogoutProcedure,
			opts...,
		),
		userUpdateProfile: connect_go.NewClient[v1.UserUpdateProfileRequest, v1.UserUpdateProfileResponse](
			httpClient,
			baseURL+UserAccountAPIUserUpdateProfileProcedure,
			opts...,
		),
		userGetSelfProfile: connect_go.NewClient[v1.UserGetSelfProfileRequest, v1.UserGetSelfProfileResponse](
			httpClient,
			baseURL+UserAccountAPIUserGetSelfProfileProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		userChangePassword: connect_go.NewClient[v1.UserChangePasswordRequest, v1.UserChangePasswordResponse](
			httpClient,
			baseURL+UserAccountAPIUserChangePasswordProcedure,
			opts...,
		),
		userGoogleAuth: connect_go.NewClient[v1.UserGoogleAuthRequest, v1.UserGoogleAuthResponse](
			httpClient,
			baseURL+UserAccountAPIUserGoogleAuthProcedure,
			opts...,
		),
		exchangeGoogleCode: connect_go.NewClient[v1.ExchangeGoogleCodeRequest, v1.UserGoogleAuthResponse](
			httpClient,
			baseURL+UserAccountAPIExchangeGoogleCodeProcedure,
			opts...,
		),
		userMetaMaskAuth: connect_go.NewClient[v1.UserMetaMaskAuthRequest, v1.UserMetaMaskAuthResponse](
			httpClient,
			baseURL+UserAccountAPIUserMetaMaskAuthProcedure,
			opts...,
		),
		userGetMetaMaskNonce: connect_go.NewClient[v1.UserGetMetaMaskNonceRequest, v1.UserGetMetaMaskNonceResponse](
			httpClient,
			baseURL+UserAccountAPIUserGetMetaMaskNonceProcedure,
			opts...,
		),
	}
}

// userAccountAPIClient implements UserAccountAPIClient.
type userAccountAPIClient struct {
	userSignup           *connect_go.Client[v1.UserSignupRequest, v1.UserSignupResponse]
	userResendSignup     *connect_go.Client[v1.UserResendSignupRequest, v1.UserResendSignupResponse]
	userCompleteSignup   *connect_go.Client[v1.UserCompleteSignupRequest, v1.UserCompleteSignupResponse]
	userLogin            *connect_go.Client[v1.UserLoginRequest, v1.UserLoginResponse]
	userRefreshToken     *connect_go.Client[v1.UserRefreshTokenRequest, v1.UserRefreshTokenResponse]
	userLogout           *connect_go.Client[v1.UserLogoutRequest, v1.UserLogoutResponse]
	userUpdateProfile    *connect_go.Client[v1.UserUpdateProfileRequest, v1.UserUpdateProfileResponse]
	userGetSelfProfile   *connect_go.Client[v1.UserGetSelfProfileRequest, v1.UserGetSelfProfileResponse]
	userChangePassword   *connect_go.Client[v1.UserChangePasswordRequest, v1.UserChangePasswordResponse]
	userGoogleAuth       *connect_go.Client[v1.UserGoogleAuthRequest, v1.UserGoogleAuthResponse]
	exchangeGoogleCode   *connect_go.Client[v1.ExchangeGoogleCodeRequest, v1.UserGoogleAuthResponse]
	userMetaMaskAuth     *connect_go.Client[v1.UserMetaMaskAuthRequest, v1.UserMetaMaskAuthResponse]
	userGetMetaMaskNonce *connect_go.Client[v1.UserGetMetaMaskNonceRequest, v1.UserGetMetaMaskNonceResponse]
}

// UserSignup calls api.user.v1.UserAccountAPI.UserSignup.
func (c *userAccountAPIClient) UserSignup(ctx context.Context, req *connect_go.Request[v1.UserSignupRequest]) (*connect_go.Response[v1.UserSignupResponse], error) {
	return c.userSignup.CallUnary(ctx, req)
}

// UserResendSignup calls api.user.v1.UserAccountAPI.UserResendSignup.
func (c *userAccountAPIClient) UserResendSignup(ctx context.Context, req *connect_go.Request[v1.UserResendSignupRequest]) (*connect_go.Response[v1.UserResendSignupResponse], error) {
	return c.userResendSignup.CallUnary(ctx, req)
}

// UserCompleteSignup calls api.user.v1.UserAccountAPI.UserCompleteSignup.
func (c *userAccountAPIClient) UserCompleteSignup(ctx context.Context, req *connect_go.Request[v1.UserCompleteSignupRequest]) (*connect_go.Response[v1.UserCompleteSignupResponse], error) {
	return c.userCompleteSignup.CallUnary(ctx, req)
}

// UserLogin calls api.user.v1.UserAccountAPI.UserLogin.
func (c *userAccountAPIClient) UserLogin(ctx context.Context, req *connect_go.Request[v1.UserLoginRequest]) (*connect_go.Response[v1.UserLoginResponse], error) {
	return c.userLogin.CallUnary(ctx, req)
}

// UserRefreshToken calls api.user.v1.UserAccountAPI.UserRefreshToken.
func (c *userAccountAPIClient) UserRefreshToken(ctx context.Context, req *connect_go.Request[v1.UserRefreshTokenRequest]) (*connect_go.Response[v1.UserRefreshTokenResponse], error) {
	return c.userRefreshToken.CallUnary(ctx, req)
}

// UserLogout calls api.user.v1.UserAccountAPI.UserLogout.
func (c *userAccountAPIClient) UserLogout(ctx context.Context, req *connect_go.Request[v1.UserLogoutRequest]) (*connect_go.Response[v1.UserLogoutResponse], error) {
	return c.userLogout.CallUnary(ctx, req)
}

// UserUpdateProfile calls api.user.v1.UserAccountAPI.UserUpdateProfile.
func (c *userAccountAPIClient) UserUpdateProfile(ctx context.Context, req *connect_go.Request[v1.UserUpdateProfileRequest]) (*connect_go.Response[v1.UserUpdateProfileResponse], error) {
	return c.userUpdateProfile.CallUnary(ctx, req)
}

// UserGetSelfProfile calls api.user.v1.UserAccountAPI.UserGetSelfProfile.
func (c *userAccountAPIClient) UserGetSelfProfile(ctx context.Context, req *connect_go.Request[v1.UserGetSelfProfileRequest]) (*connect_go.Response[v1.UserGetSelfProfileResponse], error) {
	return c.userGetSelfProfile.CallUnary(ctx, req)
}

// UserChangePassword calls api.user.v1.UserAccountAPI.UserChangePassword.
func (c *userAccountAPIClient) UserChangePassword(ctx context.Context, req *connect_go.Request[v1.UserChangePasswordRequest]) (*connect_go.Response[v1.UserChangePasswordResponse], error) {
	return c.userChangePassword.CallUnary(ctx, req)
}

// UserGoogleAuth calls api.user.v1.UserAccountAPI.UserGoogleAuth.
func (c *userAccountAPIClient) UserGoogleAuth(ctx context.Context, req *connect_go.Request[v1.UserGoogleAuthRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error) {
	return c.userGoogleAuth.CallUnary(ctx, req)
}

// ExchangeGoogleCode calls api.user.v1.UserAccountAPI.ExchangeGoogleCode.
func (c *userAccountAPIClient) ExchangeGoogleCode(ctx context.Context, req *connect_go.Request[v1.ExchangeGoogleCodeRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error) {
	return c.exchangeGoogleCode.CallUnary(ctx, req)
}

// UserMetaMaskAuth calls api.user.v1.UserAccountAPI.UserMetaMaskAuth.
func (c *userAccountAPIClient) UserMetaMaskAuth(ctx context.Context, req *connect_go.Request[v1.UserMetaMaskAuthRequest]) (*connect_go.Response[v1.UserMetaMaskAuthResponse], error) {
	return c.userMetaMaskAuth.CallUnary(ctx, req)
}

// UserGetMetaMaskNonce calls api.user.v1.UserAccountAPI.UserGetMetaMaskNonce.
func (c *userAccountAPIClient) UserGetMetaMaskNonce(ctx context.Context, req *connect_go.Request[v1.UserGetMetaMaskNonceRequest]) (*connect_go.Response[v1.UserGetMetaMaskNonceResponse], error) {
	return c.userGetMetaMaskNonce.CallUnary(ctx, req)
}

// UserAccountAPIHandler is an implementation of the api.user.v1.UserAccountAPI service.
type UserAccountAPIHandler interface {
	UserSignup(context.Context, *connect_go.Request[v1.UserSignupRequest]) (*connect_go.Response[v1.UserSignupResponse], error)
	UserResendSignup(context.Context, *connect_go.Request[v1.UserResendSignupRequest]) (*connect_go.Response[v1.UserResendSignupResponse], error)
	UserCompleteSignup(context.Context, *connect_go.Request[v1.UserCompleteSignupRequest]) (*connect_go.Response[v1.UserCompleteSignupResponse], error)
	UserLogin(context.Context, *connect_go.Request[v1.UserLoginRequest]) (*connect_go.Response[v1.UserLoginResponse], error)
	UserRefreshToken(context.Context, *connect_go.Request[v1.UserRefreshTokenRequest]) (*connect_go.Response[v1.UserRefreshTokenResponse], error)
	UserLogout(context.Context, *connect_go.Request[v1.UserLogoutRequest]) (*connect_go.Response[v1.UserLogoutResponse], error)
	UserUpdateProfile(context.Context, *connect_go.Request[v1.UserUpdateProfileRequest]) (*connect_go.Response[v1.UserUpdateProfileResponse], error)
	UserGetSelfProfile(context.Context, *connect_go.Request[v1.UserGetSelfProfileRequest]) (*connect_go.Response[v1.UserGetSelfProfileResponse], error)
	UserChangePassword(context.Context, *connect_go.Request[v1.UserChangePasswordRequest]) (*connect_go.Response[v1.UserChangePasswordResponse], error)
	// login-via-google
	UserGoogleAuth(context.Context, *connect_go.Request[v1.UserGoogleAuthRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error)
	ExchangeGoogleCode(context.Context, *connect_go.Request[v1.ExchangeGoogleCodeRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error)
	// login-via-metamask
	UserMetaMaskAuth(context.Context, *connect_go.Request[v1.UserMetaMaskAuthRequest]) (*connect_go.Response[v1.UserMetaMaskAuthResponse], error)
	UserGetMetaMaskNonce(context.Context, *connect_go.Request[v1.UserGetMetaMaskNonceRequest]) (*connect_go.Response[v1.UserGetMetaMaskNonceResponse], error)
}

// NewUserAccountAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserAccountAPIHandler(svc UserAccountAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userAccountAPIUserSignupHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserSignupProcedure,
		svc.UserSignup,
		opts...,
	)
	userAccountAPIUserResendSignupHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserResendSignupProcedure,
		svc.UserResendSignup,
		opts...,
	)
	userAccountAPIUserCompleteSignupHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserCompleteSignupProcedure,
		svc.UserCompleteSignup,
		opts...,
	)
	userAccountAPIUserLoginHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserLoginProcedure,
		svc.UserLogin,
		opts...,
	)
	userAccountAPIUserRefreshTokenHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserRefreshTokenProcedure,
		svc.UserRefreshToken,
		opts...,
	)
	userAccountAPIUserLogoutHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserLogoutProcedure,
		svc.UserLogout,
		opts...,
	)
	userAccountAPIUserUpdateProfileHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserUpdateProfileProcedure,
		svc.UserUpdateProfile,
		opts...,
	)
	userAccountAPIUserGetSelfProfileHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserGetSelfProfileProcedure,
		svc.UserGetSelfProfile,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	userAccountAPIUserChangePasswordHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserChangePasswordProcedure,
		svc.UserChangePassword,
		opts...,
	)
	userAccountAPIUserGoogleAuthHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserGoogleAuthProcedure,
		svc.UserGoogleAuth,
		opts...,
	)
	userAccountAPIExchangeGoogleCodeHandler := connect_go.NewUnaryHandler(
		UserAccountAPIExchangeGoogleCodeProcedure,
		svc.ExchangeGoogleCode,
		opts...,
	)
	userAccountAPIUserMetaMaskAuthHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserMetaMaskAuthProcedure,
		svc.UserMetaMaskAuth,
		opts...,
	)
	userAccountAPIUserGetMetaMaskNonceHandler := connect_go.NewUnaryHandler(
		UserAccountAPIUserGetMetaMaskNonceProcedure,
		svc.UserGetMetaMaskNonce,
		opts...,
	)
	return "/api.user.v1.UserAccountAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAccountAPIUserSignupProcedure:
			userAccountAPIUserSignupHandler.ServeHTTP(w, r)
		case UserAccountAPIUserResendSignupProcedure:
			userAccountAPIUserResendSignupHandler.ServeHTTP(w, r)
		case UserAccountAPIUserCompleteSignupProcedure:
			userAccountAPIUserCompleteSignupHandler.ServeHTTP(w, r)
		case UserAccountAPIUserLoginProcedure:
			userAccountAPIUserLoginHandler.ServeHTTP(w, r)
		case UserAccountAPIUserRefreshTokenProcedure:
			userAccountAPIUserRefreshTokenHandler.ServeHTTP(w, r)
		case UserAccountAPIUserLogoutProcedure:
			userAccountAPIUserLogoutHandler.ServeHTTP(w, r)
		case UserAccountAPIUserUpdateProfileProcedure:
			userAccountAPIUserUpdateProfileHandler.ServeHTTP(w, r)
		case UserAccountAPIUserGetSelfProfileProcedure:
			userAccountAPIUserGetSelfProfileHandler.ServeHTTP(w, r)
		case UserAccountAPIUserChangePasswordProcedure:
			userAccountAPIUserChangePasswordHandler.ServeHTTP(w, r)
		case UserAccountAPIUserGoogleAuthProcedure:
			userAccountAPIUserGoogleAuthHandler.ServeHTTP(w, r)
		case UserAccountAPIExchangeGoogleCodeProcedure:
			userAccountAPIExchangeGoogleCodeHandler.ServeHTTP(w, r)
		case UserAccountAPIUserMetaMaskAuthProcedure:
			userAccountAPIUserMetaMaskAuthHandler.ServeHTTP(w, r)
		case UserAccountAPIUserGetMetaMaskNonceProcedure:
			userAccountAPIUserGetMetaMaskNonceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserAccountAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedUserAccountAPIHandler struct{}

func (UnimplementedUserAccountAPIHandler) UserSignup(context.Context, *connect_go.Request[v1.UserSignupRequest]) (*connect_go.Response[v1.UserSignupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserSignup is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserResendSignup(context.Context, *connect_go.Request[v1.UserResendSignupRequest]) (*connect_go.Response[v1.UserResendSignupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserResendSignup is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserCompleteSignup(context.Context, *connect_go.Request[v1.UserCompleteSignupRequest]) (*connect_go.Response[v1.UserCompleteSignupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserCompleteSignup is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserLogin(context.Context, *connect_go.Request[v1.UserLoginRequest]) (*connect_go.Response[v1.UserLoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserLogin is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserRefreshToken(context.Context, *connect_go.Request[v1.UserRefreshTokenRequest]) (*connect_go.Response[v1.UserRefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserRefreshToken is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserLogout(context.Context, *connect_go.Request[v1.UserLogoutRequest]) (*connect_go.Response[v1.UserLogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserLogout is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserUpdateProfile(context.Context, *connect_go.Request[v1.UserUpdateProfileRequest]) (*connect_go.Response[v1.UserUpdateProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserUpdateProfile is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserGetSelfProfile(context.Context, *connect_go.Request[v1.UserGetSelfProfileRequest]) (*connect_go.Response[v1.UserGetSelfProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserGetSelfProfile is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserChangePassword(context.Context, *connect_go.Request[v1.UserChangePasswordRequest]) (*connect_go.Response[v1.UserChangePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserChangePassword is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserGoogleAuth(context.Context, *connect_go.Request[v1.UserGoogleAuthRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserGoogleAuth is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) ExchangeGoogleCode(context.Context, *connect_go.Request[v1.ExchangeGoogleCodeRequest]) (*connect_go.Response[v1.UserGoogleAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.ExchangeGoogleCode is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserMetaMaskAuth(context.Context, *connect_go.Request[v1.UserMetaMaskAuthRequest]) (*connect_go.Response[v1.UserMetaMaskAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserMetaMaskAuth is not implemented"))
}

func (UnimplementedUserAccountAPIHandler) UserGetMetaMaskNonce(context.Context, *connect_go.Request[v1.UserGetMetaMaskNonceRequest]) (*connect_go.Response[v1.UserGetMetaMaskNonceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.user.v1.UserAccountAPI.UserGetMetaMaskNonce is not implemented"))
}
